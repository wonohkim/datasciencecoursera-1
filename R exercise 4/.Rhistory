class(plants)
dims(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
objet.size(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,rplace=TRUE)
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbimon(1,size=100,prob=0,7)
rbinom(1,size=100,prob=0,7)
rbinom(1,size = 100,prob=0.7)
flips<-rbinom(1,size = 100,prob=0.7)
flips<-rbinom(100,size = 1,prob=0.7)
flips<-rbinom(n=100,size = 1,prob=0.7)
flips2<-rbinom(n=100,size = 1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois()
rpois(5,10)
my_pois<-replicate(100,rpois(5,10))
my_pois
?replicate
?rep
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Data()
d1<-Sys.Date()
class(d1)
unclass(d1)
da
d1
d2<-as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B,%d,%Y %H:%M")
?strptime()
t4<-strptime(t3,"%B %d,%Y %H:%M")
t4<-strptime(t3, "%B %d,%Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Systime(),t1,units = "days")
difftime(Systime(),t1,units = 'days')
difftime(Sys.time(),t1,units = 'days')
info()
bye()
exit()
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
head(mtcars)
?with
with(mycars,tapply(mpg,cyl,mean))
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(hp,cyl,mean))
mean<-with(mtcars,tapply(hp,cyl,mean))
4cyl<-mean[1]
cyl4<-mean[1]
cyl8<-mean[3]
cly8-cyl4
cyl8-cyl4
cyl4<-mean[1,1]
dim(mean)
mean$8-mean$4
c<-mean$8-mean$4
m<-mean
m
names(m)
m$4
m$"4"
?names
names(m)<-NULL
m
names(m)
?unname
class(m)
unname(m)
c4<-unmame(m[1])
c4<-m[1]
c4
unname(c4)
c4<-unname(c4)
c8<-unname(m[3])
c8-c4
debug(ls)
ls
n
ls()
Q
ls()
?solve
?dim
m1<-1:4
dim(m1)<-c(2,2)
m1
solve(m1)
m2<-solve(m1)
m1*m2
m1%*%m2
?<<-
help(<<-)
help("<<-")
?function
?matrix()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:10)
x<-1:10
makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
x
as.dataframe(x)
?as.
as.matrix
?as.matrix
as.matrix(x)
x<-as.matrix(x)
x
cachemean(x)
makeVector(x)
cachemean(x)
a<-makeVector(c(1,2,3,4))
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a<-makeVector(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
a$get()
debug(makeVector)
a<-makeVector(1:10)
get
a
x
y
makeCacheMatrix <- function(x = matrix()) {
# Set the value of the matrix
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
}
a<-makeCacheMatrix(1:20)
y
a
summaryRprof()
Rprof(rnorm(100))
?Rprof
?Rprof
Rprof()
lm(y~x)
set.seed(1)
?rpois()
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y=1
x1=2
x2=3
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
outcome="heart failure"
num="worse"
## Read outcome data
#open file
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
#select relevant information: names, state and conditions
data<-data[,c(2,7,11,17,23)]
#replace conditions names to match the input easily
names(data)<-c("name","state","heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
#select information of the condition on the selected state
if(outcome=="heart failure" ||
outcome=="heart attack" ||
outcome=="pneumonia") {
condition<-data[,c("name","state",outcome)]
}else {
stop (paste(" invalid outcome"))
}
## Return hospital list
condition[,3]<-as.numeric(condition[,3])
rank<-condition[order(condition[,3],condition[,1],na.last = NA),]
#set state list
states<-rank[,2]
states<-states[!duplicated(states)]
states<-states[order(states)]
## rate
if (num=="best") {num<-1}
hospital<-as.character(data.frame())
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
#select relevant information: names, state and conditions
data<-data[,c(2,7,11,17,23)]
#replace conditions names to match the input easily
names(data)<-c("name","state","heart attack", "heart failure", "pneumonia")
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
#selec
setwd("~/Desktop/rprog-data-ProgAssignment3-data")
## Read outcome data
#open file
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
#select relevant information: names, state and conditions
data<-data[,c(2,7,11,17,23)]
#replace conditions names to match the input easily
names(data)<-c("name","state","heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
#select information of the condition on the selected state
if(outcome=="heart failure" ||
outcome=="heart attack" ||
outcome=="pneumonia") {
condition<-data[,c("name","state",outcome)]
}else {
stop (paste(" invalid outcome"))
}
## Return hospital list
condition[,3]<-as.numeric(condition[,3])
rank<-condition[order(condition[,3],condition[,1],na.last = NA),]
#set state list
states<-rank[,2]
states<-states[!duplicated(states)]
states<-states[order(states)]
## rate
if (num=="best") {num<-1}
num
for(i in 1:length(states)) {
x<-rank[rank[,2]==states[i],]
if (num=="worst") {
num<-nrow(x)
hospital<-rbind(hospital,x[num,1])
num<-"worse"
}else {
hospital<-rbind(hospital,x[num,1])
print("BADA")
}
}
num
hospital<-as.character(data.frame())
for(i in 1:length(states)) {
x<-rank[rank[,2]==states[i],]
if (num=="worst") {
num<-nrow(x)
hospital<-rbind(hospital,x[num,1])
num<-"worst"
}else {
hospital<-rbind(hospital,x[num,1])
print("BADA")
}
hospital<-cbind(hospital,states)
tail(hospital,3)
hospital
for(i in 1:length(states)) {
x<-rank[rank[,2]==states[i],]
if (num=="worst") {
num<-nrow(x)
hospital<-rbind(hospital,x[num,1])
num<-"worst"
}else {
hospital<-rbind(hospital,x[num,1])
}
}
num
hospital<-as.character(data.frame())
for(i in 1:length(states)) {
x<-rank[rank[,2]==states[i],]
if (num=="worst") {
num<-nrow(x)
hospital<-rbind(hospital,x[num,1])
num<-"worst"
}else {
hospital<-rbind(hospital,x[num,1])
}
}
hospital<-cbind(hospital,states)
tail(hospital)
head(hospital)
num
x
hospital<-as.character(data.frame())
for(i in 1:length(states)) {
x<-rank[rank[,2]==states[i],]
if (num=="worst") {
n<-nrow(x)
hospital<-rbind(hospital,x[n,1])
}else {
hospital<-rbind(hospital,x[num,1])
}
}
hospital<-cbind(hospital,states)
head(hospital)
x
x[num,1]
x[n,1]
n=nrow(x)
x[n,1]
outcome="pneumonia"
## Read outcome data
#open file
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
#select relevant information: names, state and conditions
data<-data[,c(2,7,11,17,23)]
#replace conditions names to match the input easily
names(data)<-c("name","state","heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
#select information of the condition on the selected state
if(outcome=="heart failure" ||
outcome=="heart attack" ||
outcome=="pneumonia") {
condition<-data[,c("name","state",outcome)]
}else {
stop (paste(" invalid outcome"))
}
## Return hospital list
condition[,3]<-as.numeric(condition[,3])
rank<-condition[order(condition[,3],condition[,1],na.last = NA),]
#set state list
states<-rank[,2]
states<-states[!duplicated(states)]
states<-states[order(states)]
## rate
if (num=="best") {num<-1}
hospital<-as.character(data.frame())
for(i in 1:length(states)) {
x<-rank[rank[,2]==states[i],]
if (num=="worst") {
n<-nrow(x) print(n)
hospital<-rbind(hospital,x[n,1])
}else {
hospital<-rbind(hospital,x[num,1])
}
}
hospital<-as.character(data.frame())
for(i in 1:length(states)) {
x<-rank[rank[,2]==states[i],]
if (num=="worst") {
n<-nrow(x)
print(n)
hospital<-rbind(hospital,x[n,1])
}else {
hospital<-rbind(hospital,x[num,1])
}
}
num
num="worst"
hospital<-as.character(data.frame())
for(i in 1:length(states)) {
x<-rank[rank[,2]==states[i],]
if (num=="worst") {
n<-nrow(x)
print(n)
hospital<-rbind(hospital,x[n,1])
}else {
hospital<-rbind(hospital,x[num,1])
print("badoxas")
}
}
hospital<-cbind(hospital,states)
tail(hospital)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
class(hospital)
submit()
hospital<-as.data.frame(hospital)
hospital
submit()
outcome="heart attack"
num=4
## Read outcome data
#open file
data<-read.csv("outcome-of-care-measures.csv",colClasses="character")
#select relevant information: names, state and conditions
data<-data[,c(2,7,11,17,23)]
#replace conditions names to match the input easily
names(data)<-c("name","state","heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
#select information of the condition on the selected state
if(outcome=="heart failure" ||
outcome=="heart attack" ||
outcome=="pneumonia") {
condition<-data[,c("name","state",outcome)]
}else {
stop (paste(" invalid outcome"))
}
## Return hospital list
condition[,3]<-as.numeric(condition[,3])
rank<-condition[order(condition[,3],condition[,1],na.last = NA),]
#set state list
states<-rank[,2]
states<-states[!duplicated(states)]
states<-states[order(states)]
## rate
if (num=="best") {num<-1}
hospital<-as.character(data.frame())
for(i in 1:length(states)) {
x<-rank[rank[,2]==states[i],]
if (num=="worst") {
n<-nrow(x)
print(n)
hospital<-rbind(hospital,x[n,1])
}else {
hospital<-rbind(hospital,x[num,1])
}
}
hospital<-cbind(hospital,states)
hospital<-as.data.frame(hospital)
names(hospital)<-c(hospital,state)
submit()
submit()
submit()
hospital<-as.character(data.frame())
for(i in 1:length(states)) {
x<-rank[rank[,2]==states[i],]
if (num=="worst") {
n<-nrow(x)
hospital<-rbind(hospital,x[n,1])
}else {
hospital<-rbind(hospital,x[num,1])
}
}
head(hospital)
head(x)
hospital<-cbind(hospital,states)
hospital<-as.data.frame(hospital)
head(hospital)
